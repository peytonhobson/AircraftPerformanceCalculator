{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AccountService } from '../services/account.service';\nimport { ApiService } from '../services/api.service';\nimport { AuthenticationService } from '../services/auth.service';\nimport jwtDecode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/account.service\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"../services/api.service\"; // Guard to protect info from non-users/admin\n\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService, authenticationService, http, apiService) {\n      this.router = router;\n      this.accountService = accountService;\n      this.authenticationService = authenticationService;\n      this.http = http;\n      this.apiService = apiService;\n    } // TODO: Maybe do verify request where function doesnt do anything but automatically checks token,\n    // or check with database on part of token that verifies password\n\n\n    canActivate(route, state) {\n      // Checks to see if user has correct role\n      if (localStorage.getItem('token')) {\n        const decode = jwtDecode(localStorage.getItem('token'));\n\n        if (decode['roles'][0] === \"ROLE_USER\" || decode['roles'][0] === \"ROLE_ADMIN\") {\n          return true;\n        }\n      } // Routes back to login if not user\n\n\n      this.router.navigate(['/auth/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i3.AuthenticationService), i0.ɵɵinject(i4.HttpClient), i0.ɵɵinject(i5.ApiService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}