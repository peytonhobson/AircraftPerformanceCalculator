{"ast":null,"code":"import { ActivatedRoute, ChildActivationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let NavigationService = /*#__PURE__*/(() => {\n  class NavigationService {\n    constructor(route, router) {\n      this.route = route;\n      this.router = router;\n      this._sideNavVisible$ = new BehaviorSubject(true);\n      this._routeData$ = new BehaviorSubject({});\n      this._currentURL$ = new BehaviorSubject('');\n      this.router.events.pipe(filter(event => event instanceof ChildActivationEnd)).subscribe(event => {\n        let snapshot = event.snapshot;\n\n        while (snapshot.firstChild !== null) {\n          snapshot = snapshot.firstChild;\n        }\n\n        this._routeData$.next(snapshot.data);\n\n        this._currentURL$.next(router.url);\n      });\n    }\n\n    sideNavVisible$() {\n      return this._sideNavVisible$;\n    }\n\n    toggleSideNav(visibility) {\n      if (typeof visibility !== 'undefined') {\n        this._sideNavVisible$.next(visibility);\n      } else {\n        this._sideNavVisible$.next(!this._sideNavVisible$.value);\n      }\n    }\n\n    routeData$() {\n      return this._routeData$;\n    }\n\n    currentURL$() {\n      return this._currentURL$;\n    }\n\n  }\n\n  NavigationService.ɵfac = function NavigationService_Factory(t) {\n    return new (t || NavigationService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router));\n  };\n\n  NavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavigationService,\n    factory: NavigationService.ɵfac\n  });\n  return NavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}