{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '@environments/environment';\nimport { tap, map } from 'rxjs/operators';\nimport { AccountService } from './account.service';\nimport { Router } from '@angular/router';\nimport { AlertService } from './alert.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./account.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./alert.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n/**\n * Class used for api service from client to server\n */\n\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, accountService, router, alertService) {\n      this.http = http;\n      this.accountService = accountService;\n      this.router = router;\n      this.alertService = alertService;\n    }\n    /**\n     * Method for making post request to back end\n     * and returning observable response.\n     * @param path\n     * @param body\n     * @returns\n     */\n\n\n    post(path, body) {\n      console.log(\"executing post method : \" + path);\n      return this.http.post(`${environment.apiUrl}${path}`, JSON.stringify(body), httpOptions).pipe(map(res => {\n        tap(console.log);\n\n        if (res.status != \"200\") {\n          if (res.status == \"404\") {\n            this.alertService.error(res.message);\n          }\n\n          this.handleError(res.status);\n        }\n\n        return res;\n      }));\n    }\n\n    get(path) {\n      console.log(\"executing get method : \" + path);\n      return this.http.get(`${environment.apiUrl}${path}`, httpOptions).pipe(map(res => {\n        tap(console.log);\n\n        if (res.data.runwayError) {\n          this.alertService.error(res.data.runwayError);\n        }\n\n        if (res.status != \"200\") {\n          this.handleError(res.status);\n        }\n\n        return res;\n      }));\n    }\n    /**\n     * Handles errors caught in get and post requests\n     * @param error\n     * @returns\n     */\n\n\n    handleError(error) {\n      if (error == \"403\") {\n        this.accountService.logout();\n        this.router.navigate(['/account/login']);\n      }\n\n      if (error == \"404\") {\n        this.alertService.error(error);\n      }\n\n      return throwError(() => new Error(`An error occurred - Error code: ${error}`));\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AlertService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}