{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { AccountService } from '../services/account.service';\nimport { AlertService } from '@app/services/alert.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@app/services/alert.service\"; // Interceptor for HTTP errors\n\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService, alertService) {\n      this.accountService = accountService;\n      this.alertService = alertService;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if (err.url == `http://${environment.apiUrl}:7777}/register/authentication` && err.status == 404) {\n          this.alertService.error(\"Bad Authentication Code\");\n          return throwError(() => new Error(\"Bad Authentication Code\"));\n        }\n\n        const error = err.message || err.statusText;\n        return throwError(() => new Error());\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.AlertService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}