{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from '@environments/environment';\nimport { AlertService } from './alert.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./alert.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n/**\n * Service used for authentication of users\n */\n\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, alertService) {\n      this.http = http;\n      this.alertService = alertService;\n    } // Returns string for authorization header\n\n\n    createAuthToken(accessToken) {\n      return 'Bearer ' + accessToken;\n    } // Checks if user is logged in by token in local storage\n\n\n    isUserLoggedIn() {\n      if (!localStorage.getItem('token')) return false;\n      return true;\n    }\n\n    getLoggedInUserName() {\n      return localStorage.getItem('username');\n    } // Authenticates user for registering by making request to backend with code.\n\n\n    authenticate(authenicationCode, user) {\n      return this.http.post(`${environment.apiUrl}register/authentication`, JSON.stringify({\n        \"code\": authenicationCode.code,\n        \"username\": user.username,\n        \"password\": user.password,\n        \"role\": user.role\n      }), httpOptions).pipe(map(decision => {\n        if (decision.data.invalidAuthenticationCode) {\n          this.alertService.error(decision.message);\n        }\n\n        if (decision.data.usernameTaken) {\n          this.alertService.error(decision.message);\n        }\n\n        return decision;\n      }));\n    } // Handles error for registering\n\n\n    handleError(error) {\n      if (error == \"404\") {\n        this.alertService.error(\"Incorrect Authentication Code\");\n      }\n\n      return throwError(() => new Error(`An error occurred: ${error}`));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}