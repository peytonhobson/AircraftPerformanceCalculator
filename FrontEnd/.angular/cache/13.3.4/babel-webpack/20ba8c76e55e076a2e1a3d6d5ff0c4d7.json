{"ast":null,"code":"import { Router, NavigationStart } from '@angular/router';\nimport { AlertType } from '../models/alert';\nimport { AlertService } from '../services/alert.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/alert.service\";\nimport * as i3 from \"@angular/common\";\n\nfunction AlertComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 1);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_0_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const alert_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.removeAlert(alert_r1);\n    });\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const alert_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cssClass(alert_r1));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", alert_r1.message, i0.ɵɵsanitizeHtml);\n  }\n} // Component for alerts\n\n\nexport let AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n      this.id = 'default-alert';\n      this.fade = true; // Current array of alerts\n\n      this.alerts = [];\n    }\n\n    ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange); // remove 'keepAfterRouteChange' flag on the rest\n\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        } // add alert to array\n\n\n        this.alerts.push(alert); // Set timeout for 2 seconds if alert is success\n\n        if (alert.type == AlertType.Success) {\n          setTimeout(() => this.removeAlert(alert), 2000);\n        } // Set timeout for five seconds if alert is error\n\n\n        if (alert.type == AlertType.Error) {\n          setTimeout(() => this.removeAlert(alert), 5000);\n        } // auto close alert if required\n\n\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 3000);\n        }\n      }); // clear alerts on location change\n\n      this.routeSubscription = this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.alertService.clear(this.id);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n    }\n\n    removeAlert(alert) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n\n      if (this.fade) {\n        // fade out alert\n        this.alerts.find(x => x === alert).fade = true; // remove alert after faded out\n\n        setTimeout(() => {\n          this.alerts = this.alerts.filter(x => x !== alert);\n        }, 250);\n      } else {\n        // remove alert\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }\n    }\n\n    cssClass(alert) {\n      const classes = ['alert', 'alert-dismissable', 'mt-4', 'container'];\n      const alertTypeClass = {\n        [AlertType.Success]: 'alert alert-success',\n        [AlertType.Error]: 'alert alert-secondary',\n        [AlertType.Info]: 'alert alert-info',\n        [AlertType.Warning]: 'alert alert-warning'\n      };\n      classes.push(alertTypeClass[alert.type]);\n\n      if (alert.fade) {\n        classes.push('fade');\n      }\n\n      return classes.join(' ');\n    }\n\n  }\n\n  AlertComponent.ɵfac = function AlertComponent_Factory(t) {\n    return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n  };\n\n  AlertComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AlertComponent,\n    selectors: [[\"alert\"]],\n    inputs: {\n      id: \"id\",\n      fade: \"fade\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"close\", 3, \"click\"], [3, \"innerHTML\"]],\n    template: function AlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AlertComponent_div_0_Template, 4, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n      }\n    },\n    directives: [i3.NgForOf],\n    encapsulation: 2\n  });\n  return AlertComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}