{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from '../models/alert';\nimport * as i0 from \"@angular/core\";\n/**\n * Service used for alerts\n */\n\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor() {\n      this.subject = new Subject();\n      this.defaultId = 'default-alert';\n    } // enable subscribing to alerts observable\n\n\n    onAlert(id = this.defaultId) {\n      return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n    } // convenience methods\n\n\n    success(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Success,\n        message\n      })));\n    }\n\n    error(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Error,\n        message\n      })));\n    }\n\n    info(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Info,\n        message\n      })));\n    }\n\n    warn(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Warning,\n        message\n      })));\n    } // main alert method    \n\n\n    alert(alert) {\n      console.log(\"alert\");\n      alert.id = alert.id || this.defaultId;\n      this.subject.next(alert);\n    } // clear alerts\n\n\n    clear(id = this.defaultId) {\n      this.subject.next(new Alert({\n        id\n      }));\n    }\n\n  }\n\n  AlertService.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)();\n  };\n\n  AlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlertService;\n})();","map":null,"metadata":{},"sourceType":"module"}